plugins {
    kotlin("jvm")
    id("io.ktor.plugin") version "3.2.3"
    id("org.openapi.generator") version "7.15.0"
    application
}

// Repositories and group are inherited from root project

dependencies {
    // Ktor Client (for NVDB API calls)
    implementation("io.ktor:ktor-client-core")
    implementation("io.ktor:ktor-client-cio")
    implementation("io.ktor:ktor-client-content-negotiation")
    implementation("io.ktor:ktor-serialization-jackson")

    // Configuration
    implementation("com.sksamuel.hoplite:hoplite-core:2.8.0")
    implementation("com.sksamuel.hoplite:hoplite-hocon:2.8.0")

    // JSON processing for generated Java client
    implementation("com.fasterxml.jackson.core:jackson-core:2.19.0")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.19.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.19.0")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0")

    // OpenAPI Generator dependencies
    implementation("org.openapitools:jackson-databind-nullable:0.2.6")

    // Jakarta EE annotations (modern standard)
    implementation("jakarta.annotation:jakarta.annotation-api:3.0.0")

    // Date/Time
    implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.7.1")

    // Serialization
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.9.0")

    // Key-Value Store
    implementation("org.rocksdb:rocksdbjni:10.2.1")

    // Logging
    implementation("ch.qos.logback:logback-classic:1.5.18")

    // OpenLR and Geometry
    implementation("org.openlr:openlr-encoder:2.0-beta3")
    implementation("org.openlr:openlr-binary:2.0-beta3")
    implementation("org.locationtech.jts:jts-core:1.20.0")
    implementation("org.geotools:gt-main:33.2")
    implementation("org.geotools:gt-epsg-hsql:33.2")
    implementation("org.redundent:kotlin-xml-builder:1.9.3")

    // Minio S3
    implementation("io.minio:minio:8.5.17")

    // CLI parsing
    implementation("com.github.ajalt.clikt:clikt:5.0.3")

    // Testing
    testImplementation("io.ktor:ktor-server-test-host")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:2.2.0")
    testImplementation("io.kotest:kotest-runner-junit5:6.0.0")
    testImplementation("io.kotest:kotest-assertions-core:6.0.0")
    testImplementation("io.mockk:mockk:1.13.12")

    // Testcontainers for integration testing
    testImplementation("org.testcontainers:minio:1.21.3")
}

// Java toolchain and Kotlin compile options are inherited from root project

application {
    mainClass.set("no.vegvesen.nvdb.tnits.ApplicationKt")
}

// Clean only Uberiket API generated sources
val cleanUberiketGenerated by tasks.registering(Delete::class) {
    description = "Delete previously generated Uberiket API Java sources"
    group = "openapi tools"
    delete("$projectDir/src/generated/java/no/vegvesen/nvdb/apiles/uberiket")
}

// Clean only Datakatalog API generated sources
val cleanDatakatalogGenerated by tasks.registering(Delete::class) {
    description = "Delete previously generated Datakatalog API Java sources"
    group = "openapi tools"
    delete("$projectDir/src/generated/java/no/vegvesen/nvdb/apiles/datakatalog")
}

// OpenAPI generation for Uberiket API
val openApiGenerateUberiket by tasks.registering(org.openapitools.generator.gradle.plugin.tasks.GenerateTask::class) {
    generatorName.set("java")
    remoteInputSpec.set("https://nvdbapiles.atlas.vegvesen.no/api-docs/uberiket")
    outputDir.set("$projectDir/src/generated/java")
    modelPackage.set("no.vegvesen.nvdb.apiles.uberiket")
    globalProperties.set(
        mapOf(
            "models" to "",
            "modelTests" to "false",
            "modelDocs" to "false",
        ),
    )
    configOptions.set(
        mapOf(
            "library" to "restclient",
            "hideGenerationTimestamp" to "true",
            "sourceFolder" to "",
            "useJakartaEe" to "true",
        ),
    )
    dependsOn(cleanUberiketGenerated)
}

// OpenAPI generation for Datakatalog API
val openApiGenerateDatakatalog by tasks.registering(org.openapitools.generator.gradle.plugin.tasks.GenerateTask::class) {
    generatorName.set("java")
    remoteInputSpec.set("https://nvdbapiles.atlas.vegvesen.no/api-docs/datakatalog")
    outputDir.set("$projectDir/src/generated/java")
    modelPackage.set("no.vegvesen.nvdb.apiles.datakatalog")
    globalProperties.set(
        mapOf(
            "models" to "",
            "modelTests" to "false",
            "modelDocs" to "false",
        ),
    )
    configOptions.set(
        mapOf(
            "library" to "restclient",
            "hideGenerationTimestamp" to "true",
            "sourceFolder" to "",
            "useJakartaEe" to "true",
        ),
    )
    dependsOn(cleanDatakatalogGenerated)
}

// Legacy openApiGenerate task delegates to uberiket for backward compatibility
tasks.named("openApiGenerate") {
    dependsOn(generateAllApiModels)
}

// Combined task to generate both API models
val generateAllApiModels by tasks.registering {
    description = "Generate models for both Uberiket and Datakatalog APIs"
    group = "openapi tools"
    dependsOn(openApiGenerateUberiket, openApiGenerateDatakatalog)
}

sourceSets {
    main {
        java {
            srcDir("src/generated/java")
        }
    }
}
