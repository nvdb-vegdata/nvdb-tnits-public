/*
 * NVDB API Les Uberiket
 * Dette API-et brukes til å lese uberikede hendelser, vegobjekter og vegnett. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v1/Uberiket
 *
 * The version of the OpenAPI document: v1
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.nvdb.apiles.uberiket;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import no.vegvesen.nvdb.apiles.uberiket.SideMetadata;
import no.vegvesen.nvdb.apiles.uberiket.Vegobjekt;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VegobjekterSide
 */
@JsonPropertyOrder({
  VegobjekterSide.JSON_PROPERTY_VEGOBJEKTER,
  VegobjekterSide.JSON_PROPERTY_METADATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class VegobjekterSide {
  public static final String JSON_PROPERTY_VEGOBJEKTER = "vegobjekter";
  @jakarta.annotation.Nonnull
  private List<Vegobjekt> vegobjekter = new ArrayList<>();

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @jakarta.annotation.Nonnull
  private SideMetadata metadata;

  public VegobjekterSide() {
  }

  public VegobjekterSide vegobjekter(@jakarta.annotation.Nonnull List<Vegobjekt> vegobjekter) {
    
    this.vegobjekter = vegobjekter;
    return this;
  }

  public VegobjekterSide addVegobjekterItem(Vegobjekt vegobjekterItem) {
    if (this.vegobjekter == null) {
      this.vegobjekter = new ArrayList<>();
    }
    this.vegobjekter.add(vegobjekterItem);
    return this;
  }

  /**
   * Get vegobjekter
   * @return vegobjekter
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VEGOBJEKTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Vegobjekt> getVegobjekter() {
    return vegobjekter;
  }


  @JsonProperty(JSON_PROPERTY_VEGOBJEKTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVegobjekter(@jakarta.annotation.Nonnull List<Vegobjekt> vegobjekter) {
    this.vegobjekter = vegobjekter;
  }

  public VegobjekterSide metadata(@jakarta.annotation.Nonnull SideMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SideMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetadata(@jakarta.annotation.Nonnull SideMetadata metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VegobjekterSide vegobjekterSide = (VegobjekterSide) o;
    return Objects.equals(this.vegobjekter, vegobjekterSide.vegobjekter) &&
        Objects.equals(this.metadata, vegobjekterSide.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vegobjekter, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VegobjekterSide {\n");
    sb.append("    vegobjekter: ").append(toIndentedString(vegobjekter)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

