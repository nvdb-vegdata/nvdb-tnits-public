/*
 * NVDB API Les Uberiket
 * Dette API-et brukes til å lese uberikede hendelser, vegobjekter og vegnett. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v1/Uberiket
 *
 * The version of the OpenAPI document: v1
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.nvdb.apiles.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * EgenskapVerdi
 */
@JsonPropertyOrder({
  EgenskapVerdi.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BinaerEgenskap.class, name = "BinaerEgenskap"),
  @JsonSubTypes.Type(value = BoolskEgenskap.class, name = "BoolskEgenskap"),
  @JsonSubTypes.Type(value = DatoEgenskap.class, name = "DatoEgenskap"),
  @JsonSubTypes.Type(value = EnumEgenskap.class, name = "EnumEgenskap"),
  @JsonSubTypes.Type(value = FlyttallEgenskap.class, name = "FlyttallEgenskap"),
  @JsonSubTypes.Type(value = GeometriEgenskap.class, name = "GeometriEgenskap"),
  @JsonSubTypes.Type(value = HeltallEgenskap.class, name = "HeltallEgenskap"),
  @JsonSubTypes.Type(value = KortDatoEgenskap.class, name = "KortDatoEgenskap"),
  @JsonSubTypes.Type(value = ListeEgenskap.class, name = "ListeEgenskap"),
  @JsonSubTypes.Type(value = StrukturEgenskap.class, name = "StrukturEgenskap"),
  @JsonSubTypes.Type(value = TekstEgenskap.class, name = "TekstEgenskap"),
  @JsonSubTypes.Type(value = TidEgenskap.class, name = "TidEgenskap"),
})

public class EgenskapVerdi {
  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nonnull
  protected String type;

  public EgenskapVerdi() {
  }

  public EgenskapVerdi type(@jakarta.annotation.Nonnull String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@jakarta.annotation.Nonnull String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EgenskapVerdi egenskapVerdi = (EgenskapVerdi) o;
    return Objects.equals(this.type, egenskapVerdi.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EgenskapVerdi {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

