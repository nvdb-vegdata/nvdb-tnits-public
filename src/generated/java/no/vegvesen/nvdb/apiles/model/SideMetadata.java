/*
 * NVDB API Les Uberiket
 * Dette API-et brukes til å lese uberikede hendelser, vegobjekter og vegnett. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v1/Uberiket
 *
 * The version of the OpenAPI document: v1
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.nvdb.apiles.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import no.vegvesen.nvdb.apiles.model.NesteSide;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SideMetadata
 */
@JsonPropertyOrder({
  SideMetadata.JSON_PROPERTY_RETURNERT,
  SideMetadata.JSON_PROPERTY_SIDESTORRELSE,
  SideMetadata.JSON_PROPERTY_NESTE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class SideMetadata {
  public static final String JSON_PROPERTY_RETURNERT = "returnert";
  @jakarta.annotation.Nonnull
  private Integer returnert;

  public static final String JSON_PROPERTY_SIDESTORRELSE = "sidestorrelse";
  @jakarta.annotation.Nonnull
  private Integer sidestorrelse;

  public static final String JSON_PROPERTY_NESTE = "neste";
  @jakarta.annotation.Nullable
  private NesteSide neste;

  public SideMetadata() {
  }

  public SideMetadata returnert(@jakarta.annotation.Nonnull Integer returnert) {
    
    this.returnert = returnert;
    return this;
  }

  /**
   * Antallet objekter som ble returnert i denne responsen
   * @return returnert
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RETURNERT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getReturnert() {
    return returnert;
  }


  @JsonProperty(JSON_PROPERTY_RETURNERT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReturnert(@jakarta.annotation.Nonnull Integer returnert) {
    this.returnert = returnert;
  }

  public SideMetadata sidestorrelse(@jakarta.annotation.Nonnull Integer sidestorrelse) {
    
    this.sidestorrelse = sidestorrelse;
    return this;
  }

  /**
   * Maks antall objekter som blir returnert per side
   * @return sidestorrelse
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIDESTORRELSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSidestorrelse() {
    return sidestorrelse;
  }


  @JsonProperty(JSON_PROPERTY_SIDESTORRELSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSidestorrelse(@jakarta.annotation.Nonnull Integer sidestorrelse) {
    this.sidestorrelse = sidestorrelse;
  }

  public SideMetadata neste(@jakarta.annotation.Nullable NesteSide neste) {
    
    this.neste = neste;
    return this;
  }

  /**
   * Informasjon om neste side, utelatt dersom man spør på et endepunkt som gjelder et spesifikt vegobjekt. Når resultatsettet er tomt vil neste side være tom og samme start token vil returneres for påfølgende side.
   * @return neste
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NESTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NesteSide getNeste() {
    return neste;
  }


  @JsonProperty(JSON_PROPERTY_NESTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNeste(@jakarta.annotation.Nullable NesteSide neste) {
    this.neste = neste;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SideMetadata sideMetadata = (SideMetadata) o;
    return Objects.equals(this.returnert, sideMetadata.returnert) &&
        Objects.equals(this.sidestorrelse, sideMetadata.sidestorrelse) &&
        Objects.equals(this.neste, sideMetadata.neste);
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnert, sidestorrelse, neste);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SideMetadata {\n");
    sb.append("    returnert: ").append(toIndentedString(returnert)).append("\n");
    sb.append("    sidestorrelse: ").append(toIndentedString(sidestorrelse)).append("\n");
    sb.append("    neste: ").append(toIndentedString(neste)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

