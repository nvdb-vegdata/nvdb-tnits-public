/*
 * NVDB API Les Uberiket
 * Dette API-et brukes til å lese uberikede hendelser, vegobjekter og vegnett. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v1/Uberiket
 *
 * The version of the OpenAPI document: v1
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.nvdb.apiles.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import no.vegvesen.nvdb.apiles.model.SideMetadata;
import no.vegvesen.nvdb.apiles.model.Veglenkesekvens;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VeglenkesekvenserSide
 */
@JsonPropertyOrder({
  VeglenkesekvenserSide.JSON_PROPERTY_VEGLENKESEKVENSER,
  VeglenkesekvenserSide.JSON_PROPERTY_METADATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class VeglenkesekvenserSide {
  public static final String JSON_PROPERTY_VEGLENKESEKVENSER = "veglenkesekvenser";
  @jakarta.annotation.Nonnull
  private List<Veglenkesekvens> veglenkesekvenser = new ArrayList<>();

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @jakarta.annotation.Nonnull
  private SideMetadata metadata;

  public VeglenkesekvenserSide() {
  }

  public VeglenkesekvenserSide veglenkesekvenser(@jakarta.annotation.Nonnull List<Veglenkesekvens> veglenkesekvenser) {
    
    this.veglenkesekvenser = veglenkesekvenser;
    return this;
  }

  public VeglenkesekvenserSide addVeglenkesekvenserItem(Veglenkesekvens veglenkesekvenserItem) {
    if (this.veglenkesekvenser == null) {
      this.veglenkesekvenser = new ArrayList<>();
    }
    this.veglenkesekvenser.add(veglenkesekvenserItem);
    return this;
  }

  /**
   * Get veglenkesekvenser
   * @return veglenkesekvenser
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VEGLENKESEKVENSER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Veglenkesekvens> getVeglenkesekvenser() {
    return veglenkesekvenser;
  }


  @JsonProperty(JSON_PROPERTY_VEGLENKESEKVENSER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVeglenkesekvenser(@jakarta.annotation.Nonnull List<Veglenkesekvens> veglenkesekvenser) {
    this.veglenkesekvenser = veglenkesekvenser;
  }

  public VeglenkesekvenserSide metadata(@jakarta.annotation.Nonnull SideMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SideMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetadata(@jakarta.annotation.Nonnull SideMetadata metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VeglenkesekvenserSide veglenkesekvenserSide = (VeglenkesekvenserSide) o;
    return Objects.equals(this.veglenkesekvenser, veglenkesekvenserSide.veglenkesekvenser) &&
        Objects.equals(this.metadata, veglenkesekvenserSide.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(veglenkesekvenser, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VeglenkesekvenserSide {\n");
    sb.append("    veglenkesekvenser: ").append(toIndentedString(veglenkesekvenser)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

