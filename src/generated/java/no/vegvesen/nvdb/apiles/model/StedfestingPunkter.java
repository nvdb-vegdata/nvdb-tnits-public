/*
 * NVDB API Les Uberiket
 * Dette API-et brukes til å lese uberikede hendelser, vegobjekter og vegnett. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v1/Uberiket
 *
 * The version of the OpenAPI document: v1
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.nvdb.apiles.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.LinkedHashSet;
import java.util.Set;
import no.vegvesen.nvdb.apiles.model.Stedfesting;
import no.vegvesen.nvdb.apiles.model.StedfestingPunkt;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StedfestingPunkter
 */
@JsonPropertyOrder({
  StedfestingPunkter.JSON_PROPERTY_PUNKTER,
  StedfestingPunkter.JSON_PROPERTY_IS_EMPTY,
  StedfestingPunkter.JSON_PROPERTY_SIZE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class StedfestingPunkter extends Stedfesting {
  public static final String JSON_PROPERTY_PUNKTER = "punkter";
  @jakarta.annotation.Nonnull
  private Set<StedfestingPunkt> punkter = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_IS_EMPTY = "isEmpty";
  @jakarta.annotation.Nonnull
  private Boolean isEmpty;

  public static final String JSON_PROPERTY_SIZE = "size";
  @jakarta.annotation.Nonnull
  private Integer size;

  public StedfestingPunkter() {

  }

  public StedfestingPunkter punkter(@jakarta.annotation.Nonnull Set<StedfestingPunkt> punkter) {
    
    this.punkter = punkter;
    return this;
  }

  public StedfestingPunkter addPunkterItem(StedfestingPunkt punkterItem) {
    if (this.punkter == null) {
      this.punkter = new LinkedHashSet<>();
    }
    this.punkter.add(punkterItem);
    return this;
  }

  /**
   * Get punkter
   * @return punkter
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PUNKTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<StedfestingPunkt> getPunkter() {
    return punkter;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_PUNKTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPunkter(@jakarta.annotation.Nonnull Set<StedfestingPunkt> punkter) {
    this.punkter = punkter;
  }

  public StedfestingPunkter isEmpty(@jakarta.annotation.Nonnull Boolean isEmpty) {
    
    this.isEmpty = isEmpty;
    return this;
  }

  /**
   * Get isEmpty
   * @return isEmpty
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_EMPTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsEmpty() {
    return isEmpty;
  }


  @JsonProperty(JSON_PROPERTY_IS_EMPTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsEmpty(@jakarta.annotation.Nonnull Boolean isEmpty) {
    this.isEmpty = isEmpty;
  }

  public StedfestingPunkter size(@jakarta.annotation.Nonnull Integer size) {
    
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSize(@jakarta.annotation.Nonnull Integer size) {
    this.size = size;
  }


  @Override
  public StedfestingPunkter type(@jakarta.annotation.Nonnull String type) {
    this.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StedfestingPunkter stedfestingPunkter = (StedfestingPunkter) o;
    return Objects.equals(this.punkter, stedfestingPunkter.punkter) &&
        Objects.equals(this.isEmpty, stedfestingPunkter.isEmpty) &&
        Objects.equals(this.size, stedfestingPunkter.size) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(punkter, isEmpty, size, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StedfestingPunkter {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    punkter: ").append(toIndentedString(punkter)).append("\n");
    sb.append("    isEmpty: ").append(toIndentedString(isEmpty)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

