import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    kotlin("jvm") version "2.2.10"
    kotlin("plugin.serialization") version "2.2.10"
    id("io.ktor.plugin") version "3.2.3"
    id("org.openapi.generator") version "7.14.0"
    id("org.jlleitschuh.gradle.ktlint") version "13.1.0"
    id("com.github.ben-manes.versions") version "0.52.0"
    application
}

group = "no.vegvesen.nvdb.tnits"
version = "1.0.0"

ktlint {
    version.set("1.7.1")
}

repositories {
    maven { url = uri("https://repo.osgeo.org/repository/release/") }
    mavenCentral()
}

dependencies {
    // Ktor Client (for NVDB API calls)
    implementation("io.ktor:ktor-client-core")
    implementation("io.ktor:ktor-client-cio")
    implementation("io.ktor:ktor-client-content-negotiation")
    implementation("io.ktor:ktor-serialization-jackson")

    // Configuration
    implementation("com.sksamuel.hoplite:hoplite-core:2.8.0")
    implementation("com.sksamuel.hoplite:hoplite-hocon:2.8.0")

    // JSON processing for generated Java client
    implementation("com.fasterxml.jackson.core:jackson-core:2.19.0")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.19.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.19.0")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0")

    // OpenAPI Generator dependencies
    implementation("org.openapitools:jackson-databind-nullable:0.2.6")

    // Jakarta EE annotations (modern standard)
    implementation("jakarta.annotation:jakarta.annotation-api:3.0.0")

    // Database
    implementation("org.jetbrains.exposed:exposed-core:1.0.0-beta-5")
    implementation("org.jetbrains.exposed:exposed-jdbc:1.0.0-beta-5")
    implementation("org.jetbrains.exposed:exposed-kotlin-datetime:1.0.0-beta-5")
    implementation("org.jetbrains.exposed:exposed-json:1.0.0-beta-5")
    implementation("org.postgresql:postgresql:42.7.4")
    implementation("com.oracle.database.jdbc:ojdbc11:23.5.0.24.07")
    implementation("com.h2database:h2:2.3.232")
    implementation("com.zaxxer:HikariCP:6.0.0")

    // Serialization
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.9.0")

    // Key-Value Store
    implementation("org.rocksdb:rocksdbjni:10.2.1")

    // Logging
    implementation("ch.qos.logback:logback-classic:1.5.18")

    // OpenLR
    implementation("org.openlr:openlr-encoder:2.0-beta3")
    implementation("org.openlr:openlr-binary:2.0-beta3")
    implementation("org.locationtech.jts:jts-core:1.20.0")
    implementation("org.geotools:gt-main:33.2")
    implementation("org.geotools:gt-epsg-hsql:33.2")
    implementation("org.redundent:kotlin-xml-builder:1.9.3")

    // Testing
    testImplementation("io.ktor:ktor-server-test-host")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:2.2.0")
    testImplementation("io.kotest:kotest-runner-junit5:6.0.0")
    testImplementation("io.kotest:kotest-assertions-core:6.0.0")
    testImplementation("io.mockk:mockk:1.13.12")
}

application {
    mainClass.set("no.vegvesen.nvdb.tnits.ApplicationKt")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType<KotlinCompile> {
    compilerOptions {
        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_21)
        freeCompilerArgs.add("-opt-in=kotlin.RequiresOptIn")
        optIn.addAll(
            "kotlin.time.ExperimentalTime",
            "kotlinx.coroutines.ExperimentalCoroutinesApi",
        )
        freeCompilerArgs.add("-Xsuppress-warning=DEPRECATION")
        freeCompilerArgs.add("-Xcontext-parameters")
    }
}

tasks.withType<Test> {
    useJUnitPlatform()
}

// Clean only Uberiket API generated sources
val cleanUberiketGenerated by tasks.registering(Delete::class) {
    description = "Delete previously generated Uberiket API Java sources"
    group = "openapi tools"
    delete("$projectDir/src/generated/java/no/vegvesen/nvdb/apiles/uberiket")
}

// Clean only Datakatalog API generated sources
val cleanDatakatalogGenerated by tasks.registering(Delete::class) {
    description = "Delete previously generated Datakatalog API Java sources"
    group = "openapi tools"
    delete("$projectDir/src/generated/java/no/vegvesen/nvdb/apiles/datakatalog")
}

// OpenAPI generation for Uberiket API
val openApiGenerateUberiket by tasks.registering(org.openapitools.generator.gradle.plugin.tasks.GenerateTask::class) {
    generatorName.set("java")
    remoteInputSpec.set("https://nvdbapiles.atlas.vegvesen.no/api-docs/uberiket")
    outputDir.set("$projectDir/src/generated/java")
    modelPackage.set("no.vegvesen.nvdb.apiles.uberiket")
    globalProperties.set(
        mapOf(
            "models" to "",
            "modelTests" to "false",
            "modelDocs" to "false",
        ),
    )
    configOptions.set(
        mapOf(
            "library" to "restclient",
            "hideGenerationTimestamp" to "true",
            "sourceFolder" to "",
            "useJakartaEe" to "true",
        ),
    )
    dependsOn(cleanUberiketGenerated)
}

// OpenAPI generation for Datakatalog API
val openApiGenerateDatakatalog by tasks.registering(org.openapitools.generator.gradle.plugin.tasks.GenerateTask::class) {
    generatorName.set("java")
    remoteInputSpec.set("https://nvdbapiles.atlas.vegvesen.no/api-docs/datakatalog")
    outputDir.set("$projectDir/src/generated/java")
    modelPackage.set("no.vegvesen.nvdb.apiles.datakatalog")
    globalProperties.set(
        mapOf(
            "models" to "",
            "modelTests" to "false",
            "modelDocs" to "false",
        ),
    )
    configOptions.set(
        mapOf(
            "library" to "restclient",
            "hideGenerationTimestamp" to "true",
            "sourceFolder" to "",
            "useJakartaEe" to "true",
        ),
    )
    dependsOn(cleanDatakatalogGenerated)
}

// Legacy openApiGenerate task delegates to uberiket for backward compatibility
tasks.named("openApiGenerate") {
    dependsOn(generateAllApiModels)
}

// Combined task to generate both API models
val generateAllApiModels by tasks.registering {
    description = "Generate models for both Uberiket and Datakatalog APIs"
    group = "openapi tools"
    dependsOn(openApiGenerateUberiket, openApiGenerateDatakatalog)
}

sourceSets {
    main {
        java {
            srcDir("src/generated/java")
        }
    }
}

// Git hooks setup
tasks.register("installGitHooks") {
    description = "Install git hooks for code formatting"
    group = "build setup"
    notCompatibleWithConfigurationCache("Task manipulates files outside of project directory")

    doLast {
        val hooksDir = File(rootDir, ".git/hooks")
        val preCommitHook = File(hooksDir, "pre-commit")
        val preCommitTemplate = File(rootDir, "git-hooks/pre-commit")

        if (!preCommitTemplate.exists()) {
            throw GradleException("Pre-commit hook template not found at: ${preCommitTemplate.absolutePath}")
        }

        preCommitHook.writeText(preCommitTemplate.readText())
        preCommitHook.setExecutable(true)

        println("âœ… Git pre-commit hook installed successfully")
        println("The hook will automatically run ktlint formatting on commits")
    }
}
